- const getInputName = (property) => `data[${property}]`
- const getInputId = (property) => `data_${property}`

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin input(entity, propertyName, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= propertyName
    input(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
      value=_.get(entity, propertyName, '')
    )&attributes(attributes)
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin submit(form = null)
  input(class='btn btn-primary' type='submit')&attributes(attributes)

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)

mixin floatingFormInput(entity, propertyName, errors = {}, propertyPlaceholder)
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .form-floating.mb-3(class=(errors[propertyName] && 'has-danger'))
    input(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
      value=_.get(entity, propertyName, '')
      placeholder=propertyPlaceholder
    )&attributes(attributes)
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')
    label(
      for= inputId
    )= propertyPlaceholder



mixin select(entity, propertyName, errors = {}, items, label, isMultiple = false, selectedLabel)
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  - selectedOptions = entity[propertyName] ? [entity[propertyName]].flat().map((item) => item.id ? Number(item.id) : Number(item)) : []
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= label
    select(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
      multiple= isMultiple
    )&attributes(attributes)
      if !isMultiple
        option
      each item in items
        - isSelected = _.includes(selectedOptions, item.id)
        if propertyName === 'executorId'
          option(value= item.id selected= isSelected)= `${item.firstName} ${item.lastName}`
        else if selectedLabel
          option(value= item.id selected= selectedLabel.labels[0].id == item.id)= item.name
        else
          option(value= item.id selected= isSelected)= item.name
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')